// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  jQuery(function() {
    var Note, NoteEditView, NoteList, NoteListView, NoteView, note_list_view;
    Note = (function(_super) {

      __extends(Note, _super);

      function Note() {
        return Note.__super__.constructor.apply(this, arguments);
      }

      Note.prototype.urlRoot = 'http://noteme.herokuapp.com/notes';

      Note.prototype.defaults = {
        completed: 0,
        content: ''
      };

      Note.prototype.toJSON = function() {
        return {
          note: {
            completed: this.get('completed'),
            content: this.get('content')
          }
        };
      };

      return Note;

    })(Backbone.Model);
    NoteList = (function(_super) {

      __extends(NoteList, _super);

      function NoteList() {
        return NoteList.__super__.constructor.apply(this, arguments);
      }

      NoteList.prototype.model = Note;

      NoteList.prototype.url = 'http://noteme.herokuapp.com/notes';

      return NoteList;

    })(Backbone.Collection);
    NoteView = (function(_super) {

      __extends(NoteView, _super);

      function NoteView() {
        this.unrender = __bind(this.unrender, this);

        this.render = __bind(this.render, this);
        return NoteView.__super__.constructor.apply(this, arguments);
      }

      NoteView.prototype.events = {
        'click .done': 'toggle_done',
        'click .edit': 'edit',
        'click .delete': 'remove'
      };

      NoteView.prototype.tagName = 'li';

      NoteView.prototype.template = Handlebars.compile($("#note-template").html());

      NoteView.prototype.initialize = function() {
        _.bindAll(this);
        this.model.bind('change', this.render);
        return this.model.bind('remove', this.unrender);
      };

      NoteView.prototype.render = function() {
        $(this.el).html(this.template({
          content: this.model.get('content'),
          completed: this.model.get('completed')
        }));
        return this;
      };

      NoteView.prototype.unrender = function() {
        return $(this.el).remove();
      };

      NoteView.prototype.toggle_done = function() {
        if (this.model.get('completed') === 1) {
          this.model.set({
            completed: 0
          });
        } else {
          this.model.set({
            completed: 1
          });
        }
        return this.model.save();
      };

      NoteView.prototype.edit = function() {
        return new NoteEditView({
          model: this.model
        });
      };

      NoteView.prototype.remove = function() {
        return this.model.destroy();
      };

      return NoteView;

    })(Backbone.View);
    NoteEditView = (function(_super) {

      __extends(NoteEditView, _super);

      function NoteEditView() {
        return NoteEditView.__super__.constructor.apply(this, arguments);
      }

      NoteEditView.prototype.events = {
        'click #note-save': 'save'
      };

      NoteEditView.prototype.el = $('#dialog');

      NoteEditView.prototype.template = Handlebars.compile($("#note-edit-template").html());

      NoteEditView.prototype.initialize = function() {
        _.bindAll(this);
        return this.render();
      };

      NoteEditView.prototype.render = function() {
        $(this.el).html(this.template({
          content: this.model.get('content')
        }));
        return this;
      };

      NoteEditView.prototype.save = function() {
        this.model.set({
          content: $('#edit-note').val()
        });
        this.model.save();
        $(this.el).html('');
        return this.destroy;
      };

      return NoteEditView;

    })(Backbone.View);
    NoteListView = (function(_super) {

      __extends(NoteListView, _super);

      function NoteListView() {
        return NoteListView.__super__.constructor.apply(this, arguments);
      }

      NoteListView.prototype.events = {
        'click #add-note': 'addNote'
      };

      NoteListView.prototype.el = $('#note-list');

      NoteListView.prototype.template = Handlebars.compile($("#note-list-template").html());

      NoteListView.prototype.notes = new NoteList;

      NoteListView.prototype.initialize = function() {
        var _this = this;
        _.bindAll(this);
        return this.notes.fetch({
          success: function(notes) {
            _this.notes = notes;
            _this.render();
            return console.log("init: There are " + notes.length + " notes in our collection.");
          },
          error: function(notes, response) {
            return console.log("init: Server error: " + response.status + ".");
          }
        });
      };

      NoteListView.prototype.render = function() {
        var note, _i, _len, _ref, _results;
        $(this.el).html(this.template());
        _ref = this.notes.models;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          note = _ref[_i];
          _results.push($('ul').append((new NoteView({
            model: note
          })).render().el));
        }
        return _results;
      };

      NoteListView.prototype.addNote = function() {
        var note,
          _this = this;
        note = new Note;
        note.set({
          content: $('#new-note').val()
        });
        return note.save({
          content: note.get('content'),
          completed: 0
        }, {
          success: function(note) {
            _this.notes.add(note);
            _this.render();
            return console.log("save: There are " + _this.notes.length + " notes in our collection.");
          },
          error: function(note, response) {
            var error, _i, _len, _ref;
            _ref = jQuery.parseJSON(response.responseText).errors;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              error = _ref[_i];
              console.log(error.content);
            }
            return console.log("save: Server error: " + response.status + ".");
          }
        });
      };

      return NoteListView;

    })(Backbone.View);
    return note_list_view = new NoteListView;
  });

}).call(this);
